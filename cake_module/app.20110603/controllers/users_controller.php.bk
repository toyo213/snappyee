<?php
class UsersController extends AppController
{
    var $helpers = array('Form', 'Html', 'Javascript', 'Time','Session','Facebook.Facebook');
    var $name = 'Users';
    var $uses = array('User','People','PeopleFind'); //
    var $needAuth = true;      // ログイン必須のフラグ
    var $components = array('Auth');


    /*
     * ログインページ
     */
function beforeFilter() {
/*  
  parent::beforeFilter();
        $facebook = new Facebook(array(
                    'appId' => '102978646442980',
                    'secret' => 'b926e265f482ae97e91e75872000ecd2',
                    'cookie' => true,
                ));

        // 認証済みの場合はパス
        if ($this->Session->read('auth')!=NULL) {
            return ;
        }
        $session = $facebook->getSession();
        $this->set('fbsession', $session);
      
*/

/*
  if (!$session) {
            $url = $facebook->getLoginUrl(array(
                        'canvas' => 0,
                        'fbconnect' => 0,
                        'next' => 'http://ck.soogle.me/users/home/', // 遷移先(ここではlocalhost)
                        // offline_accessオフラインでのアクセス許可
                        'req_perms' => 'offline_access,user_status,read_stream,user_likes,friends_likes'
                    ));
            // アプリ未登録ユーザーなら facebook の認証ページへ遷移
            echo "<script type='text/javascript'>top.location.href = '$url';</script>";
            exit();
        } else {
            // 会員登録
            // ユーザレコードにユーザ情報を保存する
            $fbk = $facebook->api('/me');
            $this->User->create();
            $data = array();
            $data['User']['username'] = $fbk['name'];
            $data['User']['facebook_id'] = $fbk['id'];

            $this->User->save($data);
//
//            // 値をセッションに格納
//            $this->Session->write('auth', $data['User']);
//            // 認証成功でリダイレクトする
//            $this->redirect('/users/home');
//
//        if (!empty($user_data)) {
//            // 値をセッションに格納
//            $this->Session->write('auth', $user_data['User']);
//            // リダイレクトする
//            $this->redirect('/users/home');
//            exit;
//        } else { // [$user_data]が空ならログイン画面へ
//            // エラーメッセージをビューに渡す
//            $this->set('login_error', 'ログインできませんで
 }
  
  function fbtest() {
        var_dump('aaa');exit;

        }

    function twitter() {
        $options['fields'] = array('people.name', 
                                   'PeopleFind.comment',
                                   'PeopleFind.ido',
                                   'PeopleFind.kdo',
                                   'PeopleFind.spot_name',
                                   'PeopleFind.ts');
        $options['order'] = array('PeopleFind.ts DESC');
        $options['joins'] = array(
            array(
                'table' => 'people',
                'alias' => '',
                'type' => 'LEFT',
                'conditions' => array(
                    'people.id = PeopleFind.id',
                )
            )
        );

        $list = $this->PeopleFind->find('all', $options);

        //$list = $this->PeopleFind->findAll();
        $this->set('list', $list);
    }

    function map() {
    } 

    function home() {

//$this->layout = 'for_user';
    } 

    function login()
    {
        // ページタイトルの設定
        $this->pageTitle = 'Web-local.community「local.SNS」';
        // データが送られてきたら
        if (!empty($this->data)) {
            // パスワードを暗号化
            $this->data['User']['password'] = md5($this->data['User']['password']);
            // 入力された[id]と[pwd]がデータベースにある場合のみ[$user_data]に値が入る
            #$user_data = $this->User->findByEmailAndPwd($this->data['User']['email'], $this->data['User']['pwd']);
            $user_data = $this->User->findByPassword($this->data['User']['password']);
            // [$user_data]が空じゃなければ
            if (!empty($user_data)) {
                // 値をセッションに格納
                $this->Session->write('auth', $user_data['User']);
                // リダイレクトする
                $this->redirect('/users/home');
                exit;
            } else { // [$user_data]が空ならログイン画面へ
                // エラーメッセージをビューに渡す
                $this->set('login_error', 'ログインできませんでした・・・');
                // ログイン画面の呼出
                $this->render('login');
            }
        }
    }

    function add() {
        // $this->dataが空でなければ
        if(!empty($this->data)) {
            if($this->data) {
                // ユーザレコードにユーザ情報を保存する
                $this->User->create();

                $data = array();
                $data['User']['password']  = md5($this->data['User']['password']);
                $data['User']['username']  = $this->data['User']['username'];
                $this->User->save($data);
                // 保存したらLoginページにリダイレクト
                $this->redirect(array('action' => 'login'));
            }
        }
    }

    /*
     * ログアウト処理
     */
    function logout()
    {
        // セッションを破棄してログイン画面へ
        $this->Session->delete('auth');
        $this->Session->delete('fbsession');
        $this->redirect('/users/login');
        exit;
    }

    function people_add()
    {
         $name = $this->params['named']['name'];
var_dump($this->params);
         $list = $this->People->findAll(array('name' => $name));
         $this->set('name',$name);
         $this->set('list',$list);
    }
    
    function people_confirm()
    {
        var_dump($this->data);
        var_dump($this->PeopleFind->save($this->data));
    }



    function people($name = NULL ,$selectname =NULL)
    {
        $fn = 'あ';
        $selectname=isset($this->params['url']['fn'])?$this->params['url']['fn']:$fn;
        $likename = sprintf('%s%%',$selectname);
        if (!is_null($selectname)) {
            $list = $this->People->find('all',array('name_kana LIKE' => $likename));
            $this->set('list',$list); 
            $this->set('fn',isset($this->params['url']['fn'])?$this->params['url']['fn']:$fn); 
        }
    }

    function fblogin() {
            require('/home/soogle/cake_module/app/plugins/fb/facebook.php');
            $facebook = new Facebook(array(
                        'appId' => '102978646442980',
                        'secret' => 'b926e265f482ae97e91e75872000ecd2',
                        'cookie' => true,
                    ));

            $session = $facebook->getSession();
            var_dump($session);
            if (!$session) {
                $url = $facebook->getLoginUrl(array(
                            'canvas' => 1,
                            'fbconnect' => 0,
                            'req_perms' => 'status_update,publish_stream' // ステータス更新とフィードへの書き込み許可
                        ));

                print $url;
                exit;
                // アプリ未登録ユーザーなら facebook の認証ページへ遷移
                echo "<script type='text/javascript'>top.location.href = '$url';</script>";
            } else {
                try {
                    $me = $facebook->api('/me'); // 自分の情報を取得
                    $uid = $facebook->getUser(); // 自分のユーザー ID を取得
                } catch (FacebookApiException $e) {
                    $error = "Error : something is wrong, please try again later.";
                    exit();
                }
            }
            $this->set('uid', $uid);
            $this->set('me', $me);
        }

    }
}
